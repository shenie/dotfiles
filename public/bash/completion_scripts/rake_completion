#!/usr/bin/env ruby

# Copyright (c) 2009 Ryan Bates
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# Source: http://github.com/ryanb/dotfiles/blob/master/bash/completion_scripts/rake_completion

# to install, add the following line to your .bash_profile or .bashrc
# complete -C path/to/rake_completion -o default rake

# Rake completion will return matching rake tasks given typed text. This way
# you can auto-complete tasks as you are typing them by hitting [tab] or [tab][tab]
# This also caches the rake tasks for optimium speed
class RakeCompletion
  CACHE_FILE_NAME = '.rake_tasks~'
  
  def initialize(command)
    @command = command
  end
  
  def matches
    exit 0 if rakefile.nil?
    matching_tasks.map do |task|
      task.sub(typed_before_colon, '')
    end
  end
  
  private
  
  def typed
    @command[/\s(.+?)$/, 1] || ''
  end
  
  def typed_before_colon
    typed[/.+\:/] || ''
  end
  
  def matching_tasks
    all_tasks.select do |task|
      task[0, typed.length] == typed
    end
  end
  
  def all_tasks
    cache_current? ? tasks_from_cache : generate_tasks
  end
  
  def cache_current?
    File.exist?(cache_file) && File.mtime(cache_file) >= File.mtime(rakefile)
  end
  
  def rakefile
    ['rakefile', 'Rakefile', 'rakefile.rb', 'Rakefile.rb'].detect do |file|
      File.file? File.join(Dir.pwd, file)
    end
  end
  
  def cache_file
    File.join(Dir.pwd, CACHE_FILE_NAME)
  end
  
  def tasks_from_cache
    IO.read(cache_file).split
  end
  
  def generate_tasks
    tasks = `rake --prereqs | grep '^r'`.split("\n").collect {|line| line.split[1]}
    File.open(cache_file, 'w') { |f| f.write tasks.join("\n") }
    tasks
  end
end

puts RakeCompletion.new(ENV["COMP_LINE"]).matches
exit 0
