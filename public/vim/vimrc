set nocompatible                  " Must come first because it changes other options.

silent! call pathogen#runtime_append_all_bundles()

let macvim_skip_cmd_opt_movement = 1
let mapleader = ","
let g:netrw_liststyle= 3
let g:netrw_list_hide= '\(^\|\s\s\)\zs\.\S\+'

syntax on

if has("gui_macvim")
  colorscheme solarized
  set background=dark
  set lines=55
  set columns=120
  set guifont=Menlo_Regular:h14
  set guicursor=n:blinkon0
  if $SHELL =~ '/\(sh\|csh\|bash\|tcsh\|zsh\)$'
    let s:path = system("echo echo VIMPATH'${PATH}' | $SHELL -l")
    let $PATH = matchstr(s:path, 'VIMPATH\zs.\{-}\ze\n')
  endif
  nnoremap <D-N> :CommandTFlush<CR>:CommandT<CR>
else
  colorscheme midnight
endif

" I have real trouble seeing which matching paren the curson is on when it highlights both.
" This turn the matching highlight to a less subtle red fg color
" highlight MatchParen guifg=black

" Search highlight background color is distracting and makes things hard to read.
" Use an unusal fg color with underline is enough
" highlight Search     guifg=black guibg=grey    gui=underline

" Copy Visual mode color from ir_black
" hi Visual  guifg=NONE guibg=#262D51     gui=NONE      ctermfg=NONE        ctermbg=darkgray    cterm=NONE

hi CursorLine guibg=grey

set wildignore+=*.o,*.obj,.git,*.class,vendor,*.log,*.jar

" set cursorline

set noautoindent
set autowriteall
set autoread

set tabstop=2                     " Global tab width.
set shiftwidth=2                  " And again, related.
set expandtab                     " Use spaces instead of tabs

set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.

set backspace=indent,eol,start    " Intuitive backspacing.

set history=2000

set nowrap
set linebreak                     "wrap lines at convenient points

set hidden                        " Handle multiple buffers better.

set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest         " Complete files like a shell.

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

set title
set number                        " Show line numbers.
set ruler                         " Show cursor position.

set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.

set noswapfile                    " Swap files are annoying"
set nobackup                      " Don't make a backup before overwriting a file.
set nowritebackup                 " And again.
set directory=/tmp//,.            " Keep swap files in one location

set statusline=%<[%n]\ %F\ %h%m%r%=%-14.(%l,%c%V%)\ %P
set laststatus=2                  " Show the status line all the time
hi statusline guibg=red

set foldcolumn=2
" set foldmethod=syntax
" http://vim.wikia.com/wiki/All_folds_open_when_open_a_file
set foldlevel=20

" make tab completion for files/buffers act like bash
set wildmenu
set shell=bash
set switchbuf=useopen

"This changes directory but it is like autochdir
"autocmd BufEnter * silent! lcd %:p:h:gs/ /\\ /

inoremap jk <esc>

cnoremap %% <C-R>=expand('%:h').'/'<cr>

noremap <Leader>n :Ve<CR>
noremap <Leader>h :He<CR>

nnoremap <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>
nnoremap <Leader>tn :tabnew <C-R>=expand("%:p:h") . "/" <CR>

cnoremap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

inoremap <S-Enter> <Esc>o

if has("autocmd")
  augroup mygroup
    autocmd!
    autocmd bufwritepost *vimrc source $MYVIMRC
  augroup END
endif

:noremap <F1> :BufExplorer<CR>
:noremap <F2> :set hlsearch! hlsearch?<CR>
:noremap <F3> :set wrap!<CR>
" :noremap <F4> :ccl<CR>
" :noremap <F5> ggV/^$<CR>zf<CR>:set nohlsearch<CR>

" Move cursor up/down displayed lines (i.e. when long line is wrapped)
noremap <D-j> gj
noremap <D-k> gk

" TextMate style indentation
noremap <D-[> <<
noremap <D-]> >>
vnoremap <D-[> <gv
vnoremap <D-]> >gv

" Bubble single line
map <D-Up> [e
map <D-Down> ]e

" Bubble multiple lines
vmap <D-UP> [egv
vmap <D-Down> ]egv

nmap <Leader>e :CommandTFlush<cr>\|:CommandT %%<cr>

" Rails project navigation shortcuts
nnoremap <leader>gv :CommandTFlush<cr>\|:CommandT app/views<cr>
nnoremap <leader>gc :CommandTFlush<cr>\|:CommandT app/controllers<cr>
nnoremap <leader>gm :CommandTFlush<cr>\|:CommandT app/models<cr>
nnoremap <leader>gh :CommandTFlush<cr>\|:CommandT app/helpers<cr>
nnoremap <leader>gl :CommandTFlush<cr>\|:CommandT lib<cr>
nnoremap <leader>gs :CommandTFlush<cr>\|:CommandT app/assets/stylesheets<cr>
nnoremap <leader>gj :CommandTFlush<cr>\|:CommandT app/assets/javascripts<cr>
nnoremap <leader>gd :CommandTFlush<cr>\|:CommandT db/migrate<cr>
nnoremap <leader>gt :CommandTFlush<cr>\|:CommandT spec<cr>

nnoremap <leader>gr :topleft :split config/routes.rb<cr>
nnoremap <leader>gg :topleft 100 :split Gemfile<cr>

" Jump between the last 2 files
nnoremap <leader><leader> <C-^>

" rSpec shortcuts
noremap <leader>af mq?it.*do<cr>/ do<cr>:noh<cr>i, focus: true<esc>`q
noremap <leader>df mq$?, focus: true<cr>:noh<cr>dfe`q

" Split window movement shortcuts
noremap <D-M-Right> <C-W>l
noremap <D-M-Left> <C-W>h
noremap <D-M-Up> <C-W>k
noremap <D-M-Down> <C-W>j

" Remap the tab key to do autocompletion or indentation depending on the context
" from http://www.vim.org/tips/tip.php?tip_id=102
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

